name: Create Log For Repositories

on:
 # schedule:
   # - cron: '*/45 * * * *'  # Run every 30 minutes
  workflow_dispatch:  # Trigger manually

jobs:
  create_repos:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check current time and create repositories
      run: |
        for i in {292..1001}; do
          random_string=$(openssl rand -hex 4)
          repo_name="fuck_you_MrFrostyXD_${random_string}"
          echo "Creating repository $repo_name"
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.H_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"name":"'"$repo_name"'","private":false}' \
            "https://api.github.com/user/repos")
          if [ $(echo "$response" | jq -r .id) ]; then
            echo "Repository '$repo_name' created successfully."
          else
            echo "Failed to create repository '$repo_name'. Response: $response"
            exit 1  # Exit with an error code to cancel the workflow
          fi
        done

    - name: Save Workflow Log
      if: always()  # Ensure this step runs even if previous steps fail
      run: |
        timestamp=$(date +"%Y%m%d%H%M%S")
        log_file_path="$GITHUB_WORKSPACE/logs/log_${{ github.run_number }}.txt"
        log_file_name="log_${{ github.run_number }}_${timestamp}.txt"

        # Create the logs directory if it doesn't exist
        mkdir -p $GITHUB_WORKSPACE/logs
        
        echo "Saving workflow log to file: $log_file_name"
        echo "Workflow Log:" > $log_file_name
        cat $log_file_path >> $log_file_name || echo "No previous log file found"

        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git checkout -b log
        git add $log_file_name
        git commit -m "Add workflow log"
        git push -u origin HEAD:log
        git push -u origin HEAD:log "https://${{ secrets.GH_TOKEN_UPLOAD_LOG }}@github.com/${{ github.repository }}.git"
